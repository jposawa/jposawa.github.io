{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","borderColor","vencedor","corVencedor","color","value","Board","i","winning","indice","this","vencedores","length","squares","numCol","totalCol","offset","n","push","renderSquare","totalRow","rows","parseInt","isNaN","renderRow","renderBoard","React","Component","Game","state","history","Array","fill","col","row","stepNumber","xIsNext","slice","location","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","fontWeight","jumpTo","espacoVazio","find","s","console","log","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.124292a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n/*\r\nclass Square extends React.Component {\r\n    render() {\r\n      return (\r\n        <button \r\n            className=\"square\"\r\n            onClick={() => this.props.onClick()}\r\n        >\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n*/\r\n\r\nfunction Square(props)\r\n{\r\n    return(\r\n        <button \r\n            className = \"square\"\r\n            onClick={props.onClick} \r\n            style={{borderColor: props.vencedor ? props.corVencedor : \"\", color: props.vencedor ? props.corVencedor : \"\"}}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n        let winning = false;\r\n        let indice = 0;\r\n        while(!winning && indice < this.props.vencedores.length)\r\n        {\r\n            if(this.props.vencedores[indice++] === i)\r\n                winning = true;\r\n        }\r\n\r\n      return (\r\n        <Square\r\n            corVencedor = \"#369\"\r\n            vencedor={winning}\r\n            value={this.props.squares[i]}\r\n            onClick = {() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n\r\n    renderRow(numCol, totalCol)\r\n    {\r\n        const squares = [];\r\n        const offset = numCol * totalCol;\r\n        \r\n        for(let n = 0; n < totalCol; n++)\r\n        {\r\n            squares.push(this.renderSquare(offset + n));\r\n        }\r\n        return(\r\n            <div className = \"board-row\">\r\n                {squares}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderBoard(totalCol,totalRow)\r\n    {\r\n        const rows = [];\r\n        totalCol = parseInt(totalCol);\r\n        totalRow = parseInt(totalRow);\r\n\r\n        if(isNaN(totalCol) || isNaN(totalRow))\r\n        {\r\n            totalCol = 3;\r\n            totalRow = 3;\r\n        }\r\n        \r\n        for(let n = 0; n < totalRow; n++)\r\n        {\r\n            rows.push(this.renderRow(n, totalCol));\r\n        }\r\n\r\n        return <div>{rows}</div>;\r\n    }\r\n  \r\n    render() {\r\n        /*\r\n        <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n                */\r\n        return (this.renderBoard());\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            history:[\r\n            {\r\n                squares: Array(9).fill(null),\r\n                col: null,\r\n                row: null\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i)\r\n    {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        let location = [0,0];\r\n\r\n        if(calculateWinner(squares) || squares[i])\r\n        {\r\n            //console.log(calculateWinner(squares));\r\n            return;\r\n        }\r\n        location[0] = (i%3+1)\r\n        if(i < 3)\r\n        {\r\n            location[1] = 1;\r\n        }\r\n        else if(i < 6)\r\n        {\r\n            location[1] = 2;\r\n        }\r\n        else\r\n        {\r\n            location[1] = 3;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O'; //O MESMO QUE UM if PARA DETERMINAR SE É 'X' OU 'O'\r\n        this.setState(\r\n        {\r\n            history: history.concat(\r\n            [{\r\n                squares: squares,\r\n                col: location[0],\r\n                row: location[1],\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext //ALTERNA A BOOLEANA QUE DETERMINA ENTRE 'X' E 'O'\r\n        });\r\n    }\r\n\r\n    jumpTo(step)\r\n    {\r\n        this.setState(\r\n        {\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n\r\n      const moves = history.map((step, move) => \r\n      {\r\n            const desc = move ?\r\n                'Go to move #' + move + \" (\" + step.col + \",\" + step.row + \")\" :\r\n                'Go to game start';\r\n            return(\r\n                <li key={move}>\r\n                    <button style = {{fontWeight: this.state.stepNumber === move ? 'bold' : 'normal'}} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n      });\r\n\r\n      let espacoVazio = current.squares.find((s) => {return s == null;}) === null; //USA O FIND() PARA PROCURAR SE EXISTE NULL E ENTÃO RETORN TRUE OU FALSE LOGO\r\n\r\n      console.log(espacoVazio);\r\n\r\n      let status;\r\n      let vencedores;\r\n      if(winner)\r\n      {\r\n          //console.log(winner);\r\n          vencedores = winner[1];\r\n          status = 'Winner: ' + winner[0];\r\n      }\r\n      else if(espacoVazio)\r\n      {\r\n          status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n          vencedores = [];\r\n      }\r\n      else\r\n      {\r\n          status = \"EMPATE\";\r\n          vencedores = [];\r\n      }\r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n                squares = {current.squares}\r\n                vencedores = {vencedores}\r\n                onClick = {(i) => this.handleClick(i)}\r\n            />\r\n\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );  \r\n\r\nfunction calculateWinner(squares)\r\n{\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++)\r\n    {\r\n        const [a, b, c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n        {\r\n            console.log(lines[i].length);\r\n            return [squares[a], lines[i]];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}"],"sourceRoot":""}